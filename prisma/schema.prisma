generator client {
  provider = "prisma-client-js"
}

//* strinng connection => mysql://USER:PASSWORD@HOST:PORT/DATABASE
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

model Conversacion {
  id        Int               @id @default(autoincrement())
  nombre    String
  categoria String
  active    Boolean?          @default(true)
  type      ConversationType?
  createdAt DateTime          @default(now())
  isDeleted Boolean?          @default(false)
  updatedAt DateTime          @updatedAt
  clientes  Cliente[]
  mensajes  Mensaje[]

  // usuario   Usuario  @relation(fields: [usuarioId], references: [id])
  // usuarioId Int
  empresa   Empresa @relation(fields: [empresaId], references: [id])
  empresaId String

  @@map(name: "Conversaciones")
}

model Mensaje {
  id                    Int        @id @default(autoincrement())
  conversacionId        Int
  anyWord               Boolean    @default(false)
  palabrasClave         String
  cuerpo                String?    @db.VarChar(1000)
  respuestaEncuesta     String?    @db.VarChar(1000)
  anyResponse           Boolean?   @default(false)
  mediaType             MediaType?
  fileName              String?
  predecesorId          Int?
  altMessage            String?    @db.VarChar(1000)
  mensajeAsesor         Boolean?   @default(false)
  backToMainCode        String?    @db.VarChar(20)
  backToLastMessageCode String?    @db.VarChar(20)
  repeatMessageCode     String?    @db.VarChar(20)
  editable              Boolean?   @default(true)
  botIdConexion         Int?
  isDeleted             Boolean?   @default(false)

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  successor      Mensaje[]    @relation("MessageSubMessage")
  predecesor     Mensaje?     @relation("MessageSubMessage", fields: [predecesorId], references: [id])
  // header         Cabecera?    @relation(fields: [cabeceraId], references: [id])
  cliente        Cliente[]
  conversaciones Conversacion @relation(fields: [conversacionId], references: [id])

  @@map("Mensajes")
}

model Encuesta {
  id             Int    @id @default(autoincrement())
  empresaId      String
  conversacionId Int

  mensajeId       Int
  mensajePregunta String @db.VarChar(1000)

  clienteId        BigInt
  nombreCliente    String @db.VarChar(100)
  apellidoCliente  String @db.VarChar(100)
  whatsappCliente  String @db.VarChar(20)
  respuestaCliente String @db.VarChar(100)

  isDeleted Boolean? @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // empresa          Empresa  @relation(fields: [empresaId], references: [id])
  // conversacion     Conversacion @relation(fields: [conversacionId], references: [id])
  // mensaje          Mensaje  @relation(fields: [mensajeId], references: [id])
  // cliente          Cliente  @relation(fields: [clienteId], references: [id])

  @@map("Encuestas")
}

model Empresa {
  id              String            @id @default(uuid())
  ruc             String            @unique @db.VarChar(50)
  whatsapp        String            @unique @db.VarChar(15)
  nombre          String            @db.VarChar(100)
  logo            String?           @db.VarChar(100)
  chatTiming      Int               @default(5)
  isDeleted       Boolean?          @default(false)
  clientes        Cliente[]
  conversaciones  Conversacion[]
  usuario         Usuario[]
  registroCarga   RegistroCarga[]
  registroMensaje RegistroMensaje[]
  roles           Rol[]

  apps App[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  ChatHistory  ChatHistory[]
  Departamento Departamento[]

  @@map(name: "Empresas")
}

model Usuario {
  id            BigInt      @id @default(autoincrement()) @db.BigInt
  nombre        String      @db.VarChar(100)
  apellido      String      @db.VarChar(100)
  whatsapp      String      @unique
  email         String      @unique
  password      String
  avatar        String?     @db.VarChar(100)
  roleId        Int?
  status        Boolean?    @default(true)
  maxChats      Int         @default(0)
  quantityChats Int?        @default(0)
  role          Rol?        @relation(fields: [roleId], references: [id])
  roleDefaultId String?
  roleDefault   RolDefault? @relation(fields: [roleDefaultId], references: [id])
  isDeleted     Boolean?    @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  empresa         Empresa           @relation(fields: [empresaId], references: [id])
  empresaId       String
  ChatHistory     ChatHistory[]
  RespuestaRapida RespuestaRapida[]
  Departamentos   Departamento[]

  @@map("Usuarios")
}

model RespuestaRapida {
  id        Int      @id @default(autoincrement())
  nombre    String   @db.VarChar(100)
  mensaje   String   @db.VarChar(1000)
  usuarioId BigInt
  isDeleted Boolean? @default(false)
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("RespuestasRapidas")
}

model Departamento {
  id             Int      @id @default(autoincrement())
  nombre         String   @db.VarChar(100)
  codigoAsociado String   @unique @db.VarChar(100)
  chatTiming     Int      @default(5)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  empresaId      String
  isDeleted      Boolean? @default(false)

  empresa  Empresa   @relation(fields: [empresaId], references: [id])
  usuarios Usuario[]

  @@map("Departamentos")
}

model App {
  id                Int      @id @default(autoincrement())
  nombre            String   @db.VarChar(50)
  appId             String?
  token             String?  @db.Text
  businessAccountId String?
  phoneNumberId     String?
  webHookApi        String?  @unique
  webHookToken      String?  @unique
  secretKey         String?  @unique
  empresaId         String
  active            Boolean? @default(true)
  isDeleted         Boolean? @default(false)

  empresa Empresa @relation(fields: [empresaId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Apps")
}

model Pais {
  id        Int      @id @default(autoincrement())
  longName  String   @db.VarChar(100)
  shortName String   @db.VarChar(100)
  codigo    Int      @unique
  isDeleted Boolean? @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Cliente   Cliente[]

  @@map("Paises")
}

model Cliente {
  id                    BigInt        @id @default(autoincrement()) @db.BigInt
  empresaId             String
  nombre                String        @db.VarChar(100)
  apellido              String        @db.VarChar(100)
  nombreEmpresa         String?       @db.VarChar(100)
  whatsapp              String
  paisId                Int?
  email                 String?       @db.VarChar(100)
  categoria1            String?
  categoria2            String?
  num1                  Decimal?      @db.Decimal(18, 2)
  num2                  Decimal?      @db.Decimal(18, 2)
  text1                 String?
  text2                 String?
  date1                 DateTime?
  date2                 DateTime?
  conversacionId        Int?
  ultimoMensajeId       Int?
  isChating             Boolean?      @default(false)
  chatAsesorId          BigInt?
  isDeleted             Boolean?      @default(false)
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  asociatedDepartmentId Int?
  botId                 Conversacion? @relation(fields: [conversacionId], references: [id])
  ultimoMensaje         Mensaje?      @relation(fields: [ultimoMensajeId], references: [id])
  empresa               Empresa       @relation(fields: [empresaId], references: [id])
  ChatHistory           ChatHistory[]
  pais                  Pais?         @relation(fields: [paisId], references: [id])

  @@map("Clientes")
}

model MensajeLog {
  id         BigInt   @id @default(autoincrement()) @db.BigInt
  mensajeId  String   @unique
  status     String
  recipentId String
  isDeleted  Boolean? @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("MensajeLogs")
}

model RegistroCarga {
  id             Int            @id @default(autoincrement())
  descripcion    String?
  archivoOrigen  String
  totalRegistros Int
  registrosOk    Int
  registrosError Int
  status         String
  isDeleted      Boolean?       @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  detalleCarga   DetalleCarga[]
  empresa        Empresa        @relation(fields: [empresaId], references: [id])
  empresaId      String

  @@map("RegistrosCargas")
}

model DetalleCarga {
  id              BigInt   @id @default(autoincrement()) @db.BigInt
  registroCargaId Int
  nombresCliente  String
  whatsappCliente String
  emailCliente    String?
  causeError      String?
  status          String
  isDeleted       Boolean? @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  registroCarga RegistroCarga @relation(fields: [registroCargaId], references: [id])

  @@map("DetallesCargas")
}

model RegistroMensaje {
  id            BigInt    @id @default(autoincrement()) @db.BigInt
  descripcion   String
  templateUsed  String
  status        Status    @default(ENVIADO)
  scheduledDate DateTime?
  templateId    String?
  isDeleted     Boolean?  @default(false)

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  // RegistroMensajeCliente RegistroMensajeCliente[]
  // usuario         Usuario           @relation(fields: [usuarioId], references: [id])
  CampaignDetails CampaignDetails[]
  empresa         Empresa           @relation(fields: [empresaId], references: [id])
  empresaId       String

  @@map("RegistrosMensajes")
}

model CampaignDetails {
  id                BigInt   @id @default(autoincrement()) @db.BigInt
  clienteId         BigInt?
  nombre            String
  apellido          String
  whatsapp          String
  email             String?
  registroMensajeId BigInt
  enviado           Boolean? @default(false)
  entregado         Boolean? @default(false)
  leido             Boolean? @default(false)
  whatsappMessageId String?  @unique
  isDeleted         Boolean? @default(false)

  registroMensaje RegistroMensaje @relation(fields: [registroMensajeId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MediaType {
  IMAGE
  VIDEO
  DOCUMENT
  AUDIO
}

model RolDefault {
  id        String       @id @default(uuid())
  nombre    DefaultRoles @unique
  isDeleted Boolean?     @default(false)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  acciones  Accion[]
  Usuario   Usuario[]

  @@map("RolesDefault")
}

model Rol {
  id        Int       @id @default(autoincrement())
  nombre    String    @db.VarChar(50) //rol no unique debido a que las empresas pueden crear roles con el mismo nombre
  // empresaId Int
  empresaId String
  isDeleted Boolean?  @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  usuario   Usuario[]
  acciones  Accion[]
  empresa   Empresa   @relation(fields: [empresaId], references: [id])

  @@map("Roles")
}

model Accion {
  id         Int          @id @default(autoincrement())
  nombre     Actions      @unique
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  roles      Rol[]
  RolDefault RolDefault[]

  @@map("Acciones")
}

model ChatHistory {
  id        BigInt     @id @default(autoincrement()) @db.BigInt
  clienteId BigInt
  asesorId  BigInt?
  mensaje   String?
  media     String?
  mediaType MediaType?
  mimeType  String?
  isClient  Boolean    @default(false)
  empresaId String
  isDeleted Boolean?   @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  empresa   Empresa    @relation(fields: [empresaId], references: [id])
  cliente   Cliente    @relation(fields: [clienteId], references: [id])
  asesor    Usuario?   @relation(fields: [asesorId], references: [id])

  @@map("ChatHistory")
}

model GeneralMessage {
  id                String      @id @default(uuid())
  messageID         String?     @unique
  empresaId         String
  appID             Int
  origen            String
  idOrigen          BigInt
  mensaje           String?
  media             String?
  mediaType         MediaType?
  recipientWhatsapp String?
  recipientId       BigInt?
  typeRecipient     String?     @default("BOT")
  status            String
  header            String?
  headerType        HeaderType?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean? @default(false)

  @@map("GeneralMessages")
}

enum Origin {
  CLIENTE
  AGENTE
  PLANTILLA
  CAMPAIGN
  BOT
}

enum Actions {
  CREAR_APP
  EDITAR_APP
  ELIMINAR_APP
  VER_APP

  CREAR_PLANTILLA
  EDITAR_PLANTILLA
  ELIMINAR_PLANTILLA
  VER_PLANTILLA

  CREAR_BOT
  EDITAR_BOT
  ELIMINAR_BOT
  VER_BOT

  CREAR_EMPRESA
  EDITAR_EMPRESA
  ELIMINAR_EMPRESA
  VER_EMPRESA

  CREAR_USUARIO
  EDITAR_USUARIO
  ELIMINAR_USUARIO
  VER_USUARIO

  CREAR_CLIENTE
  EDITAR_CLIENTE
  ELIMINAR_CLIENTE
  VER_CLIENTE

  CREAR_ROL
  EDITAR_ROL
  ELIMINAR_ROL
  VER_ROL

  CREAR_CAMPAIGNS

  CHAT_PERMISSION

  SUPER_CHAT_PERMISSION

  VER_LOGS
}

enum Status {
  ENVIADO
  ERROR
  EN_COLA
  CANCELADO
}

enum DefaultRoles {
  ADMIN
  OPERADOR
  CREADOR_PLANTILLAS
  AGENTE
  SUPERVISOR
}

enum ConversationType {
  DEFAULT
}

enum HeaderType {
  TEXT
  IMAGE
  VIDEO
  DOCUMENT
}
